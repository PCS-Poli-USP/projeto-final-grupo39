LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;

ENTITY CONTROLE IS 
	PORT (
		CLK_IN 			: IN std_logic; -- clock de entrada
		BOT_1				: IN std_logic; -- PLAY / PAUSE
		BOT_2				: IN std_logic;
		Player_1_IN		: IN std_logic_vector(8 DOWNTO 0); -- entrada da posição das jogadas do Player 1
		Player_2_IN		: IN std_logic_vector(8 DOWNTO 0); -- entrada da posição das jogadas do Player 2
		Player_1_Pre	: OUT std_logic_vector(8 DOWNTO 0); -- entrada da posição das jogadas do Player 1
		Player_2_Pre	: OUT std_logic_vector(8 DOWNTO 0); -- entrada da posição das jogadas do Player 2
		Player_1_OUT 	: OUT std_logic_vector(8 DOWNTO 0); -- saida da posição das jogadas do Player 1
		Player_2_OUT 	: OUT std_logic_vector(8 DOWNTO 0); -- saida da posição das jogadas do Player 2
		XO					: OUT std_logic -- X = 1 | O = 0
        );
END CONTROLE; -- fim da entidade

ARCHITECTURE rtl OF CONTROLE IS -- arquitetura da UART_RX é: 

	TYPE ESTADO IS (POSICAO, CONFIRMA); 
	SIGNAL SM_CONTROLE : ESTADO := POSICAO;

	SIGNAL	Player_1_Pre_aux	: std_logic_vector(8 DOWNTO 0):= (OTHERS => '0'); -- entrada da posição das jogadas do Player 1
	SIGNAL	Player_2_Pre_aux	: std_logic_vector(8 DOWNTO 0):= (OTHERS => '0'); -- entrada da posição das jogadas do Player 2
	SIGNAL	Player_1_OUT_aux 	: std_logic_vector(8 DOWNTO 0):= (OTHERS => '0'); -- saida da posição das jogadas do Player 1
	SIGNAL	Player_2_OUT_aux 	: std_logic_vector(8 DOWNTO 0):= (OTHERS => '0'); -- saida da posição das jogadas do Player 2
	SIGNAL	Tabuleiro_aux 		: std_logic_vector(8 DOWNTO 0):= (OTHERS => '0'); -- saida da posição das jogadas do Player 2
	SIGNAL	XO_aux				: std_logic := '0';
	SIGNAL	BOT_1_aux, BOT_2_aux	: std_logic;
	SIGNAL 	Counter		 		: INTEGER RANGE 0 TO 8 := 0;	
	SIGNAL 	EN : std_logic := '1';
	COMPONENT DEBOUNCE IS
		PORT (
			CLK: IN std_logic;
			DATA_IN : IN std_logic;
			DATA_OUT : OUT std_logic
			);
	END COMPONENT;
	
	COMPONENT TABULEIRO IS 
		PORT (
			Player_1 	: IN std_logic_vector(8 DOWNTO 0); -- entrada da posição das jogadas do Player 1
			Player_2 	: IN std_logic_vector(8 DOWNTO 0); -- entrada da posição das jogadas do Player 2
			Tabuleiro_OUT 	: OUT std_logic_vector(8 DOWNTO 0)
			  );
	END COMPONENT;

	BEGIN
	DEBOUNCE_1 : DEBOUNCE
	PORT MAP(CLK_IN, BOT_1, BOT_1_aux); 
	DEBOUNCE_2 : DEBOUNCE
	PORT MAP(CLK_IN, BOT_2, BOT_2_aux);
	
	TABULEIRO_1 : TABULEIRO
	PORT MAP(Player_1_IN, Player_2_IN, Tabuleiro_aux);
	
	PROCESS (BOT_1_aux, BOT_2_aux)
	BEGIN
	
		IF EN = '1' THEN	
			CASE SM_CONTROLE IS
				WHEN POSICAO =>
					IF XO_aux = '1' THEN -- X
						IF BOT_2_aux = '1' THEN
							IF Counter < 9 THEN
								Player_1_Pre_aux <= (Player_1_Pre_aux'range => '0');  -- Zera todos os bits do vetor
								Player_1_Pre_aux(Counter) <= '1';
								Counter <= Counter + 1;
								SM_CONTROLE <= POSICAO;
							ELSE
								Counter <= 0;
								SM_CONTROLE <= POSICAO;
							END IF;
						ELSIF BOT_1_aux = '1' THEN
							IF Tabuleiro_aux(Counter) = '0' THEN
								SM_CONTROLE <= CONFIRMA;
							ELSE
								SM_CONTROLE <= POSICAO;
							END IF;
						END IF;
					ELSIF XO_aux = '0' THEN -- O
						IF BOT_2_aux = '1' THEN
							IF Counter < 9 THEN
								Player_2_Pre_aux <= (Player_2_Pre_aux'range => '0');  -- Zera todos os bits do vetor
								Player_2_Pre_aux(Counter) <= '1';
								Counter <= Counter + 1;
								SM_CONTROLE <= POSICAO;
							ELSE
								Counter <= 0;
								SM_CONTROLE <= POSICAO;
							END IF;
						ELSIF BOT_1_aux = '1' THEN
							IF Tabuleiro_aux(Counter) = '0' THEN
								SM_CONTROLE <= CONFIRMA;
							ELSE
								SM_CONTROLE <= POSICAO;
							END IF;
						END IF;		
					END IF;
					
				WHEN CONFIRMA =>
					IF BOT_2_aux = '1' THEN
						SM_CONTROLE <= POSICAO;
					ELSIF BOT_1_aux = '1' THEN
						IF XO_aux = '1' THEN
							XO_aux <= '0';
							Player_1_OUT_aux <= Player_1_Pre_aux;
							SM_CONTROLE <= POSICAO;
						ELSIF XO_aux = '0' THEN
							XO_aux <= '1';
							Player_2_OUT_aux <= Player_2_Pre_aux;
							SM_CONTROLE <= POSICAO;
						END IF;
					END IF;
			END CASE;
			Player_1_Pre <= Player_1_Pre_aux;
			Player_2_Pre <= Player_2_Pre_aux;
			Player_1_OUT <= Player_1_OUT_aux;
			Player_2_OUT <= Player_2_OUT_aux;
			XO <= XO_aux;
		END IF;
	END PROCESS;
END ARCHITECTURE; 
