	LIBRARY ieee;
	USE ieee.std_logic_1164.ALL;
	
	ENTITY Teste IS
		PORT (
		clock_i 					 		: IN std_logic;
		GAME_MODE_IN 					: IN std_logic;
		PLAY								: IN std_logic;
		Bot_1								: IN std_logic;
		Bot_2								: IN std_logic;
		--Player_1							: IN std_logic_vector(8 DOWNTO 0);
		--Player_2							: IN std_logic_vector(8 DOWNTO 0);
		
		digit_o1, digit_o2, digit_o3, digit_o4, digit_o5, digit_o6 : OUT std_logic_vector(7 DOWNTO 0); 

        ledB : out std_logic
        
		);
	END ENTITY Teste;

	ARCHITECTURE RTL OF Teste IS

		SIGNAL SPAV_CONTROL, XO_CONTROL 									   		: std_logic;
		SIGNAL Player1_CTRL, Player2_CTRL, SPAV_CTRL								   			: std_logic_vector(8 DOWNTO 0);
		SIGNAL Player1_DISPLAY, Player2_DISPLAY	 : std_logic_vector(8 DOWNTO 0);
		SIGNAL Player_1, Player_2						: std_logic_vector(8 DOWNTO 0);
		SIGNAL Player_1_Preview, Player_2_Preview						: std_logic_vector(8 DOWNTO 0);
		COMPONENT SPAV IS 
			PORT (
				CLK_IN 		: IN std_logic; -- clock de entrada
				Enable		: IN std_logic; -- Enable do SPAV
				Player_1 	: IN std_logic_vector(8 DOWNTO 0); -- entrada da posição das jogadas do Player 1
				SPAV_IN 		: IN std_logic_vector(8 DOWNTO 0); -- entrada da posição das jogadas anteriores do SPAV
				SPAV_OUT 	: OUT std_logic_vector(8 DOWNTO 0) --  saída da posição das jogadas do SPAV
				  );
		END COMPONENT;
		
		COMPONENT SPAV_v2 IS 
			PORT (
				CLK_IN 		: IN std_logic; -- clock de entrada
				Enable		: IN std_logic; -- Enable do SPAV
				Player_1 	: IN std_logic_vector(8 DOWNTO 0); -- entrada da posição das jogadas do Player 1
				SPAV_IN 		: IN std_logic_vector(8 DOWNTO 0); -- entrada da posição das jogadas anteriores do SPAV
				SPAV_OUT 	: OUT std_logic_vector(8 DOWNTO 0) --  saída da posição das jogadas do SPAV
				  );
		END COMPONENT;
		
		COMPONENT ENGINE IS 
			PORT (
				CLK_IN 			: IN std_logic; -- clock de entrada
				Enable			: IN std_logic; -- PLAY / PAUSE
				MODO_DE_JOGO	: IN std_logic;
				Player_1 		: IN std_logic_vector(8 DOWNTO 0); -- entrada da posição das jogadas do Player 1
				Player_2 		: IN std_logic_vector(8 DOWNTO 0); -- entrada da posição das jogadas do Player 2
				Player_1_OUT 	: OUT std_logic_vector(8 DOWNTO 0); -- saida da posição das jogadas do Player 1
				Player_2_OUT 	: OUT std_logic_vector(8 DOWNTO 0); -- saida da posição das jogadas do Player 2
				SPAV_OUT			: OUT std_logic -- Enable do SPAV
				);
		END COMPONENT;
		
		COMPONENT CONTROLE IS 
			PORT (
				CLK_IN 			: IN std_logic; -- clock de entrada
				BOT_1				: IN std_logic; -- PLAY / PAUSE
				BOT_2				: IN std_logic;
				Player_1_IN		: IN std_logic_vector(8 DOWNTO 0); -- entrada da posição das jogadas do Player 1
				Player_2_IN		: IN std_logic_vector(8 DOWNTO 0); -- entrada da posição das jogadas do Player 2
				Player_1_Pre	: OUT std_logic_vector(8 DOWNTO 0); -- entrada da posição das jogadas do Player 1
				Player_2_Pre	: OUT std_logic_vector(8 DOWNTO 0); -- entrada da posição das jogadas do Player 2
				Player_1_OUT 	: OUT std_logic_vector(8 DOWNTO 0); -- saida da posição das jogadas do Player 1
				Player_2_OUT 	: OUT std_logic_vector(8 DOWNTO 0); -- saida da posição das jogadas do Player 2
				XO					: OUT std_logic -- X = 1 | O = 0
				  );
		END COMPONENT;


			
	BEGIN
		Player2_CTRL <= Player_2;
		
		WITH GAME_MODE_IN SELECT Player1_CTRL <=
			Player_1 	WHEN 		'1', -- PvP
			SPAV_CTRL 	WHEN OTHERS;  -- PvE
		
		SPAV_1 : SPAV_v2
		PORT MAP(clock_i, SPAV_CONTROL, Player2_DISPLAY, Player1_DISPLAY, SPAV_CTRL);
		
		ENGINE_1 : ENGINE
		PORT MAP(clock_i, PLAY, GAME_MODE_IN, Player1_CTRL, Player2_CTRL, Player1_DISPLAY, Player2_DISPLAY, SPAV_CONTROL);
		
		CONTROLE_1 : CONTROLE
		PORT MAP(clock_i, Bot_1, Bot_2, Player1_DISPLAY, Player2_DISPLAY, Player_1_Preview, Player_2_Preview, Player_1, Player_2, XO_CONTROL);

	END architecture;
